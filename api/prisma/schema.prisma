// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = "mongodb+srv://Maennjar:test123@cluster0.vkt50fu.mongodb.net/project4?retryWrites=true&w=majority&appName=Cluster0"
}

model User {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    username  String    @unique
    email     String    @unique
    password  String
    avatar    String?
    createdAt DateTime  @default(now())
    Post      Post[]
    comments  Comment[]
    Likes     Likes[]
    chats     Chat[]    @relation(fields: [chatIDs], references: [id])
    chatIDs   String[]  @db.ObjectId
}

model Post {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    description String
    images      String[]
    createdAt   DateTime  @default(now())
    user        User      @relation(fields: [userId], references: [id])
    userId      String    @db.ObjectId
    comments    Comment[]
    Likes       Likes[]
}

model Comment {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    description String
    createdAt   DateTime @default(now())
    user        User     @relation(fields: [userId], references: [id])
    userId      String   @db.ObjectId
    post        Post     @relation(fields: [postId], references: [id])
    postId      String   @db.ObjectId
}

model Likes {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @db.ObjectId
    post      Post     @relation(fields: [postId], references: [id])
    postId    String   @db.ObjectId
}

model Chat {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    users       User[]    @relation(fields: [userIDs], references: [id])
    userIDs     String[]  @db.ObjectId
    createdAt   DateTime  @default(now())
    seenBy      String[]  @db.ObjectId
    messages    Message[]
    lastMessage String?
}

model Message {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    text      String
    userId    String
    chat      Chat     @relation(fields: [chatId], references: [id])
    chatId    String   @db.ObjectId
    createdAt DateTime @default(now())
}
